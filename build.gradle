import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.bodar.com"
        }
    }

    dependencies {
        classpath 'net.masterthought:cucumber-reporting:2.5.0'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.github.markusbernhardt', name: 'proxy-vole', version: '1.0.2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.4'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.4'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.4'
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task executeFeatures() {
    dependsOn assemble, compileTestJava
    doLast {
        File file = new File("cucumber-html-report")
        file.delete()
        try {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                args = ['--plugin', 'pretty',
                        '--plugin', 'html:build/cucumber-html-report',
                        '--plugin', 'json:build/cucumber.json',
                        '--plugin', 'rerun:build/rerun.txt',
                        '--glue', 'org.fundacionjala.pivotal', 'src/test/resources/features']
                jvmArgs = ["-Dcucumber.options=" + cucumberOptions]
                jvmArgs = ["-DurlApi=" + urlApi]
                jvmArgs = ["-Demail=" + email]
                jvmArgs = ["-Dpassword=" + password]
                jvmArgs = ["-DapiToken=" + apiToken]
            }
        } catch (Exception e) {
            //In order to avoid FAILURE: Build failed with an exception.
        }
        sleep(5000) // sleep due to cucumber.json is not created too fast
        generateReport("build/cucumber.json", "cucumber-html-report")
    }
}

task reExecuteFeatures() {
    dependsOn assemble, compileTestJava
    doLast {
        File failedScenariosFile = new File('build/rerun.txt')
        if (!failedScenariosFile.getText().isEmpty()) {
            String[] failedScenariosArray = failedScenariosFile.getText().split(" ")
            String failedScenariosPath = ''
            failedScenariosArray.each {
                String item -> failedScenariosPath += featurePath + item + " "
            }
            try {
                javaexec {
                    main = "cucumber.api.cli.Main"
                    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                    args = ['--plugin', 'pretty',
                            '--plugin', 'html:build/retry/cucumber-html-report',
                            '--plugin', 'json:build/retry/cucumber.json',
                            '--plugin', 'rerun:build/retry/rerun.txt',
                            '--glue', 'org.fundacionjala.pivotal']
                    jvmArgs = ["-Dcucumber.options=" + failedScenariosPath]
                    jvmArgs = ["-DurlApi=" + urlApi]
                    jvmArgs = ["-Demail=" + email]
                    jvmArgs = ["-Dpassword=" + password]
                    jvmArgs = ["-DapiToken=" + apiToken]
                }
            } catch (Exception e) {
                //In order to avoid FAILURE: Build failed with an exception.
            }
            sleep(5000) // sleep due to cucumber.json is not created too fast
            generateReport("build/retry/cucumber.json", "cucumber-html-report/retry")
        } else {
            println 'It does not exist failed scenarios'
            throw new StopExecutionException('It does not exist failed scenarios')
        }
    }
}

def generateReport(String pathCucumber, String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)
    String buildProjectName = "pivotal-api-test"
    Configuration configuration = new Configuration(reportOutputDirectory, buildProjectName)
    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
    reportBuilder.generateReports()
}
